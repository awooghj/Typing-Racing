{"version":3,"sources":["services/AuthService.js","context/AuthContext.js","components/Navbar.js","components/Home.js","components/Message.js","components/Login.js","components/Register.js","components/TodoItem.js","services/TodoService.js","components/Todos.js","components/Admin.js","history.js","game-components/GameMenu.js","socketConfig.js","game-components/CreateGame.js","game-components/JoinGame.js","game-components/CountDown.js","game-components/StartBtn.js","game-components/DisplayWords.js","game-components/Form.js","game-components/ProgressBar.js","game-components/ScoreBoard.js","game-components/DisplayGameCode.js","game-components/TypeRacer.js","components/Game.js","hocs/PrivateRoute.js","hocs/UnPrivateRoute.js","App.js","reportWebVitals.js","index.js"],"names":["AuthService","login","user","console","log","fetch","method","body","JSON","stringify","headers","Accept","then","res","status","json","data","isAuthenticated","username","role","register","logout","AuthContext","createContext","AuthProvider","children","useState","setUser","setIsAuthenticated","isLoaded","setIsLoaded","useEffect","Provider","value","Navbar","props","useContext","onClickLogoutHandler","success","className","to","id","type","onClick","Home","getStyle","baseClass","message","msgError","Message","msgBody","Login","password","setMessage","authContext","onChange","e","target","name","onSubmit","preventDefault","history","push","htmlFor","placeholder","Register","timerID","useRef","clearTimeout","setTimeout","TodoItem","todo","TodoService","getTodos","response","postTodo","Todos","setTodo","todos","setTodos","resetForm","map","_id","getData","Admin","createBrowserHistory","GameMenu","useHistory","socket","io","transports","CreateGame","nickName","setNickName","emit","JoinGame","gameID","userInput","setUserInput","CountDown","msg","timer","setTimer","on","removeListener","StartBtn","player","showBtn","setShowBtn","isPartyLeader","playerID","typedCorrectlyStyle","getTypedWords","words","typedWords","slice","currentWordIndex","join","style","currentStyle","getCurrentWord","getWordsToBeTyped","wordsToBeTyped","length","DisplayWords","Form","isOpen","isOver","textInput","current","focus","readOnly","charAt","ref","calculatePercentage","wordsLength","toFixed","ProgressBar","players","percentage","class","width","playerObj","ScoreBoard","scoreBoard","filter","WPM","sort","playerA","playerB","getScoreBoard","scope","index","DisplayGameCode","copySuccess","setCopySuccess","textInputRef","select","document","execCommand","TypeRacer","gameState","find","socketID","findPlayer","Game","setGameState","game","removeAllListeners","exact","path","component","render","PrivateRoute","Component","roles","rest","includes","pathname","state","from","location","UnPrivateRoute","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cb9def07.chunk.js","sourcesContent":["// // all this file is gonna do is to fetch request through our endpoint\r\n// // that we create in previous files\r\n\r\n// // fetch use two then() because\r\n// // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\r\n// // \"Here we are fetching a JSON file across the network and printing it to\r\n// // the console. The simplest use of fetch() takes one argument — the path\r\n// // to the resource you want to fetch — and returns a promise containing the\r\n// // response (a Response object). This is just an HTTP response, not the actual\r\n// // JSON. To extract the JSON body content from the response, we use the json()\r\n// // method (defined on the Body mixin, which is implemented by both the Request\r\n// // and Response objects.)\"\r\n\r\n// const login = (user) => {\r\n//   console.log(user);\r\n//   return fetch(\"/user/login\", {\r\n//     method: \"post\",\r\n//     body: JSON.stringify(user),\r\n//     headers: {\r\n//       \"Content-Type\": \"application/json\",\r\n//       Accept: \"application/json\",\r\n//     },\r\n//   }).then((res) => {\r\n//     if (res.status !== 401) return res.json().then((data) => data);\r\n//     else return { isAuthenticated: false, user: { username: \"\", role: \"\" } };\r\n//   });\r\n// };\r\n\r\n// const register = (user) => {\r\n//   console.log(user);\r\n//   return fetch(\"/user/register\", {\r\n//     method: \"post\",\r\n//     body: JSON.stringify(user),\r\n//     headers: {\r\n//       \"Content-Type\": \"application/json\",\r\n//       Accept: \"application/json\",\r\n//     },\r\n//   })\r\n//     .then((res) => res.json())\r\n//     .then((data) => data);\r\n// };\r\n// const logout = () => {\r\n//   return fetch(\"/user/logout\")\r\n//     .then((res) => res.json())\r\n//     .then((data) => data);\r\n// };\r\n\r\n// const isAuthenticated = () => {\r\n//   return fetch(\"/user/authenticated\").then((res) => {\r\n//     // res.status !== 401 means that this is a response that we wrote for ourselves\r\n//     // passport automatically sends a 401 status if we are not authenticated if we\r\n//     // use passport middleware, so we are gonna write the response client side\r\n//     // so if it's not 401 status code, that means we have already written our own\r\n//     // custom response here\r\n//     if (res.status !== 401) {\r\n//       return res.json().then((data) => data);\r\n//     } else {\r\n//       // if you get 401 code, that means you are unauthorized\r\n//       return { isAuthenticated: false, user: { username: \"\", role: \"\" } };\r\n//     }\r\n//   });\r\n// };\r\n\r\n// const AuthServices = {\r\n//   login,\r\n//   register,\r\n//   logout,\r\n//   isAuthenticated,\r\n// };\r\n\r\n// export default AuthServices;\r\n\r\nconst login = (user) => {\r\n  console.log(user);\r\n  return fetch(\"/user/login\", {\r\n    method: \"post\",\r\n    body: JSON.stringify(user),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  }).then((res) => {\r\n    if (res.status !== 401) return res.json().then((data) => data);\r\n    else return { isAuthenticated: false, user: { username: \"\", role: \"\" } };\r\n  });\r\n};\r\n\r\nconst register = (user) => {\r\n  console.log(user);\r\n  return fetch(\"/user/register\", {\r\n    method: \"post\",\r\n    body: JSON.stringify(user),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => data);\r\n};\r\nconst logout = () => {\r\n  return fetch(\"/user/logout\")\r\n    .then((res) => res.json())\r\n    .then((data) => data);\r\n};\r\n\r\nconst isAuthenticated = () => {\r\n  return fetch(\"/user/authenticated\").then((res) => {\r\n    // res.status !== 401 means that this is a response that we wrote for ourselves\r\n    // passport automatically sends a 401 status if we are not authenticated if we\r\n    // use passport middleware, so we are gonna write the response client side\r\n    // so if it's not 401 status code, that means we have already written our own\r\n    // custom response here\r\n    if (res.status !== 401) {\r\n      return res.json().then((data) => data);\r\n    } else {\r\n      // if you get 401 code, that means you are unauthorized\r\n      return { isAuthenticated: false, user: { username: \"\", role: \"\" } };\r\n    }\r\n  });\r\n};\r\n\r\nconst AuthService = {\r\n  login,\r\n  register,\r\n  logout,\r\n  isAuthenticated,\r\n};\r\n\r\nexport default AuthService;\r\n","import React, { createContext, useEffect, useState } from \"react\";\r\nimport AuthService from \"../services/AuthService\";\r\n\r\n// createContext gives us an AuthContext object and this gives us a provider\r\n// in a consumer\r\n// so a privider, anything that's wrapped in a provider is gonna have an\r\n// access to the global state, but you also have to consume it\r\n// so we just consume the global state\r\n\r\nexport const AuthContext = createContext();\r\n\r\n// children in this case refers to the components that we want to wrap our\r\n// provider around\r\n// children will be the app components\r\nconst AuthProvider = ({ children }) => {\r\n  // user is the user that is logged in\r\n  const [user, setUser] = useState(null);\r\n  // isAuthenticated is if this user is authenticated or not\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  // isLoaded is used as a boolean value to see if the app is loaded because\r\n  // we will make a request to the server\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  // empty array or empty dependency means I only want this useEffect hook\r\n  // to execute once\r\n  // we will use it as a dev mount lifecycle\r\n  useEffect(() => {\r\n    AuthService.isAuthenticated().then((data) => {\r\n      setUser(data.user);\r\n      setIsAuthenticated(data.isAuthenticated);\r\n      setIsLoaded(true);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {!isLoaded ? (\r\n        <h1>Loading</h1>\r\n      ) : (\r\n        // what we are doing here is wrapping the AuthContext provider, value object\r\n        // contains states and functions we want to be global\r\n        // we are wrapping providers around the app components, children\r\n        <AuthContext.Provider\r\n          // value props decide what we want to make available as a global state\r\n          value={{ user, setUser, isAuthenticated, setIsAuthenticated }}>\r\n          {children}\r\n        </AuthContext.Provider>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\nimport AuthService from \"../services/AuthService\";\r\n\r\nexport default function Navbar(props) {\r\n  const { isAuthenticated, user, setIsAuthenticated, setUser } = useContext(\r\n    AuthContext\r\n  );\r\n\r\n  const onClickLogoutHandler = () => {\r\n    AuthService.logout().then((data) => {\r\n      // what happening in if statement is, when we log out we reset the user\r\n      // so the username is gonna be empty string and row is gonna be empty\r\n      // string and then we are just setting it to false\r\n      // the success of data.success is whether or not we successfully log\r\n      // out or not\r\n      if (data.success) {\r\n        setUser(data.user);\r\n        setIsAuthenticated(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  const unauthenticatedNavBar = () => {\r\n    return (\r\n      <>\r\n        {/* here is gonna be made up of list components. remember, we removed all li\r\n        elements within our unordered list(ul), so we will just re-add them back within\r\n        // here  */}\r\n\r\n        {/* it's a home link */}\r\n        <Link to=\"/\">\r\n          <li className=\"nav-item nav-link\">Home</li>\r\n        </Link>\r\n\r\n        {/* it's a login link */}\r\n        <Link to=\"/login\">\r\n          <li className=\"nav-item nav-link\">Login</li>\r\n        </Link>\r\n\r\n        {/* it's a register link */}\r\n        <Link to=\"/register\">\r\n          <li className=\"nav-item nav-link\">Register</li>\r\n        </Link>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const authenticatedNavBar = () => {\r\n    return (\r\n      <>\r\n        {/* it's a home link */}\r\n        <Link to=\"/\">\r\n          <li className=\"nav-item nav-link\">Home</li>\r\n        </Link>\r\n\r\n        {/* it's a todos link */}\r\n        <Link to=\"/todos\">\r\n          <li className=\"nav-item nav-link\">Todos</li>\r\n        </Link>\r\n\r\n        {/* since there two roles for a user to be, so if you are an admin you see\r\n        admin page, otherwise, you see null */}\r\n        {user.role === \"admin\" ? (\r\n          <Link to=\"/admin\">\r\n            <li className=\"nav-item nav-link\">Admin</li>\r\n          </Link>\r\n        ) : null}\r\n\r\n        {/* it's a logout button */}\r\n        <Link to=\"/\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-link nav-item nav-link\"\r\n            onClick={onClickLogoutHandler}>\r\n            Logout\r\n          </button>\r\n        </Link>\r\n\r\n        <Link to=\"/game\">\r\n          <li className=\"nav-item nav-link\">Hall</li>\r\n        </Link>\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      {/* to=\"/\" in Link takes us to the homepage */}\r\n      <Link to=\"/\">\r\n        <div className=\"navbar-brand\">Type Racing</div>\r\n      </Link>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            {/* we want different links displayed dependt on whether or not you are\r\n            logged in or not\r\n            if you are logged in you see different link than if you are not logged in,\r\n            for example*/}\r\n            {/* if we are not authenticated, I want you to render out unauthenticatedNavBar\r\n            otherwise, we render out the authenticated version of it, authenticatedNavBar\r\n\r\n            isAuthenticated is gonna be pualled from our global context*/}\r\n            {!isAuthenticated ? unauthenticatedNavBar() : authenticatedNavBar()}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","// this is a filler component\r\n\r\nimport React from \"react\";\r\n\r\nexport default function Home() {\r\n  return <h1>Home page</h1>;\r\n}\r\n","// import React from \"react\";\r\n\r\n// const getStyle = (props) => {\r\n//   let baseClass = \"alert\";\r\n//   if (props.message.msgError) {\r\n//     // props.message.msgError means we want to display our message in a certain way\r\n//     baseClass = baseClass + \"alert-danger\"; // this gonna output a red bootstrap well\r\n//   } else {\r\n//     // if it's not an error, you want to display like\r\n//     baseClass = baseClass + \"alert-primary\";\r\n//   }\r\n//   return baseClass + \" text-center\";\r\n\r\n//   // these are all bootstrap classes\r\n// };\r\n\r\n// export default function Message(props) {\r\n//   return (\r\n//     // we want to generate error messages in one way and non-error messages in another way\r\n//     // so we create function 'getStyle' to help us get there\r\n//     <div className={getStyle(props)} role=\"alert\">\r\n//       {/* within this div, we actually are gonna output the state message from our login\r\n//         component, so remember we are passing that down as a prop\r\n//          */}\r\n//       {props.message.msgBody}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nimport React from \"react\";\r\n\r\nconst getStyle = (props) => {\r\n  let baseClass = \"alert \";\r\n\r\n  // props.message.msgError means we want to display our message in a certain way\r\n  if (props.message.msgError) baseClass = baseClass + \"alert-danger\";\r\n  // if it's not an error, you want to display like\r\n  else baseClass = baseClass + \"alert-primary\";\r\n  return baseClass + \" text-center\";\r\n\r\n  // these are all bootstrap classes\r\n};\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    // we want to generate error messages in one way and non-error messages in another way\r\n    // so we create function 'getStyle' to help us get there\r\n    <div className={getStyle(props)} role=\"alert\">\r\n      {/* within this div, we actually are gonna output the state message from our login\r\n         component, so remember we are passing that down as a prop */}\r\n      {props.message.msgBody}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\nimport Message from \"../components/Message\";\r\nimport AuthService from \"../services/AuthService\";\r\n\r\nconst Login = (props) => {\r\n  const [user, setUser] = useState({ username: \"\", password: \"\" });\r\n\r\n  // useState(null) is to signify not to render this message component\r\n  const [message, setMessage] = useState(null);\r\n  const authContext = useContext(AuthContext);\r\n\r\n  const onChange = (e) => {\r\n    // here we update the user to what the user is typing in. so we copy the user properties,\r\n    // ...user, within our user object and next we will change the field which is targeted\r\n    // e.target.name can be either username or password field and then e.target.value is setting\r\n    // the actual value that the user is typing in\r\n    setUser({ ...user, [e.target.name]: e.target.value });\r\n    console.log(user);\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    AuthService.login(user).then((data) => {\r\n      console.log(data);\r\n      const { isAuthenticated, user, message } = data;\r\n      if (isAuthenticated) {\r\n        // here we need to update our global context of the user since it's authenticated\r\n        authContext.setUser(user);\r\n        authContext.setIsAuthenticated(isAuthenticated);\r\n        // once we have done  authContext.setUser(user); and\r\n        //authContext.setIsAuthenticated(isAuthenticated);, we want to navigate to the todos page,\r\n        // inorder to do this, the history object below is gonna be from our react router, so that's\r\n        // where we are getting it from. the history object has 'push' function, which is where you\r\n        // want to go, so it will take us to the todos page\r\n        // tutorial to 'history' object: https://reactrouter.com/web/api/history\r\n        props.history.push(\"/todos\");\r\n      } else {\r\n        // the system return an error message telling what is wrong\r\n        setMessage(message);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <h3>Please sign in</h3>\r\n        {/* we can't use 'for' word since those are reserved */}\r\n        {/* The for attribute is called htmlFor for consistency with the DOM property API */}\r\n        <label htmlFor=\"username\" className=\"sr-only\">\r\n          Username:\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          onChange={onChange}\r\n          className=\"form-control\"\r\n          placeholder=\"Enter username\"\r\n        />\r\n\r\n        <label htmlFor=\"password\" className=\"sr-only\">\r\n          Password:\r\n        </label>\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          onChange={onChange}\r\n          className=\"form-control\"\r\n          placeholder=\"Enter username\"\r\n        />\r\n\r\n        <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">\r\n          Log in\r\n        </button>\r\n      </form>\r\n\r\n      {/* we have a message component underneath the form in case we have a message to \r\n    display \r\n    code below means if message is not null, we will render the message component and\r\n    we pass message as prop. otherwise, we don't render anything*/}\r\n\r\n      {message ? <Message message={message} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Message from \"../components/Message\";\r\nimport AuthService from \"../services/AuthService\";\r\n\r\nconst Register = (props) => {\r\n  const [user, setUser] = useState({ username: \"\", password: \"\", role: \"\" });\r\n\r\n  // useState(null) is to signify not to render this message component\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const resetForm = () => {\r\n    setUser({ username: \"\", password: \"\", role: \"\" });\r\n  };\r\n\r\n  let timerID = useRef(null);\r\n  useEffect(() => {\r\n    return () => {\r\n      clearTimeout(timerID);\r\n    };\r\n  }, []);\r\n\r\n  const onChange = (e) => {\r\n    // here we update the user to what the user is typing in. so we copy the user properties,\r\n    // ...user, within our user object and next we will change the field which is targeted\r\n    // e.target.name can be either username or password field and then e.target.value is setting\r\n    // the actual value that the user is typing in\r\n    setUser({ ...user, [e.target.name]: e.target.value });\r\n    console.log(user);\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    AuthService.register(user).then((data) => {\r\n      const { message } = data;\r\n      setMessage(message);\r\n      resetForm();\r\n      if (!message.msgError) {\r\n        timerID = setTimeout(() => {\r\n          props.history.push(\"/login\");\r\n        }, 2000);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <h3>Please register</h3>\r\n        {/* we can't use 'for' word since those are reserved */}\r\n        {/* The for attribute is called htmlFor for consistency with the DOM property API */}\r\n        <label htmlFor=\"username\" className=\"sr-only\">\r\n          Username:\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={user.username}\r\n          onChange={onChange}\r\n          className=\"form-control\"\r\n          placeholder=\"Enter username\"\r\n        />\r\n\r\n        <label htmlFor=\"password\" className=\"sr-only\">\r\n          Password:\r\n        </label>\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={user.password}\r\n          onChange={onChange}\r\n          className=\"form-control\"\r\n          placeholder=\"Enter username\"\r\n        />\r\n        <label htmlFor=\"role\" className=\"sr-only\">\r\n          Role:\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"role\"\r\n          value={user.role}\r\n          onChange={onChange}\r\n          className=\"form-control\"\r\n          placeholder=\"Enter role (admin/user)\"\r\n        />\r\n\r\n        <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">\r\n          Register\r\n        </button>\r\n      </form>\r\n\r\n      {/* we have a message component underneath the form in case we have a message to\r\n    display\r\n    code below means if message is not null, we will render the message component and\r\n    we pass message as prop. otherwise, we don't render anything*/}\r\n\r\n      {message ? <Message message={message} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React from \"react\";\r\n\r\nexport default function TodoItem(props) {\r\n  return <li>{props.todo.name}</li>;\r\n}\r\n","// this function is to get the todos from the database\r\nconst getTodos = () => {\r\n  // this is a get request because by default it's already a get request\r\n  return fetch(\"/user/todos\").then((response) => {\r\n    // since passport automatically sends a 401 unathorized if you are not\r\n    // authenticated already, so in order to combat this, what we are gonna\r\n    //  do is write our won response client side.\r\n    if (response.status !== 401) {\r\n      // but if it isn't a 401 request, that\r\n      // means we already wrote a response on the server side\r\n      return response.json().then((data) => data);\r\n    } else return { message: { msgBody: \"UnAuthorized\", msgError: true } };\r\n  });\r\n};\r\n\r\n// this function is to create todo\r\nconst postTodo = (todo) => {\r\n  return fetch(\"/user/todo\", {\r\n    method: \"post\",\r\n    body: JSON.stringify(todo),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  }).then((response) => {\r\n    if (response.status !== 401) {\r\n      return response.json().then((data) => data);\r\n    } else return { message: { msgBody: \"UnAuthorized\" }, msgError: true };\r\n  });\r\n};\r\n\r\nconst TodoService = {\r\n  getTodos,\r\n  postTodo,\r\n};\r\n\r\nexport default TodoService;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport TodoService from \"../services/TodoService\";\r\nimport Message from \"./Message\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\n\r\nexport default function Todos() {\r\n  const [todo, setTodo] = useState({ name: \"\" });\r\n\r\n  // we have this state below for using this variable to get our todo from\r\n  // our database\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  // we set 'null' to symbolize thta we don't want to render a message component\r\n  const [message, setMessage] = useState(null);\r\n  const authContext = useContext(AuthContext);\r\n\r\n  // now we are goning to create a todo service which is going to fetch todos\r\n  // and allow us to create todo\r\n\r\n  useEffect(() => {\r\n    TodoService.getTodos().then((data) => {\r\n      setTodos(data.todos);\r\n    });\r\n  }, []);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    TodoService.postTodo(todo).then((data) => {\r\n      const { message } = data;\r\n      resetForm();\r\n\r\n      // if this message.msgError is false, we want to get all the todos\r\n      if (!message.msgError) {\r\n        // this should give us the updated list of todos since we successfully\r\n        // create a todo\r\n        TodoService.getTodos().then((getData) => {\r\n          setTodos(getData.todos);\r\n\r\n          // setMessage(message) should give us a message that we have sucessfully\r\n          // create this todo\r\n          setMessage(message);\r\n        });\r\n\r\n        // message.msgBody === \"UnAuthorized\" means the JWT token has expired\r\n        // basically if we get into this if else statement\r\n      } else if (message.msgBody === \"UnAuthorized\") {\r\n        // this setMessage(message); should be error message\r\n        setMessage(message);\r\n\r\n        // what authContext.setUser is doing is resetting the user since the JWT\r\n        // token has been no longer valid\r\n        authContext.setUser({ username: \"\", role: \"\" });\r\n        authContext.setIsAuthenticated(false);\r\n      } else {\r\n        // here setMessage(message) is sending an error message. this will be like\r\n        // if the client is trying to send an empty string to the backend\r\n        // The backend will say \"hey you can't do that\"\r\n        setMessage(message);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    setTodo({ name: e.target.value });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setTodo({ name: \"\" });\r\n  };\r\n\r\n  return (\r\n    //   we display our todo in an unorder list\r\n    <div>\r\n      <ul className=\"list-group\">\r\n        {todos.map((todo) => {\r\n          // todo._id gaurantees to be unique since it's got from database\r\n          // then we just pass todo as prop, todo={todo}\r\n          return <TodoItem key={todo._id} todo={todo} />;\r\n        })}\r\n      </ul>\r\n      <br />\r\n      <form onSubmit={onSubmit}>\r\n        <label htmlFor=\"todo\">Enter Todo</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"todo\"\r\n          value={todo.name}\r\n          onChange={onChange}\r\n          className=\"form-control\"\r\n          placeholder=\"Please Enter Todo\"\r\n        />\r\n        <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n      {message ? <Message message={message} /> : null}\r\n    </div>\r\n  );\r\n}\r\n","// this is more or less just a filler component, so this component\r\n// is just gonna display it is an admin page\r\n\r\nimport React from \"react\";\r\n\r\nexport default function Admin() {\r\n  return <h1>Admin page</h1>;\r\n}\r\n","import {createBrowserHistory} from 'history'\r\nconst history = createBrowserHistory()\r\nexport default history","import React from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nconst GameMenu = props =>{\r\n    let history = useHistory()\r\n    return(\r\n        <div className=\"text-center\">\r\n            <h1>Welcome to the Type Racer Clone</h1>\r\n            <button type=\"button\" onClick={()=>history.push('/game/create')}\r\n                                    className=\"btn btn-primary btn-lg mr-3\">Creat Game</button>\r\n            <button type=\"button\" onClick={()=>history.push('/game/join')}\r\n                                    className=\"btn btn-primary btn-lg\">Join Game</button>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default GameMenu","import io from \"socket.io-client\";\r\nconst socket = io(\"http://localhost:3001\", { transports: [\"websocket\"] });\r\nexport default socket;\r\n","import React, { useState } from \"react\";\r\nimport socket from \"../socketConfig\";\r\nconst CreateGame = (props) => {\r\n  const [nickName, setNickName] = useState(\"\");\r\n\r\n  const onChange = (e) => {\r\n    // set the nickname to whatever the target is\r\n    // so that's gonna update each time someone\r\n    // types within our input field\r\n\r\n    setNickName(e.target.value);\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    // so here we emit create-game and now we need\r\n    // to go back to server side and listen for the\r\n    // event\r\n    socket.emit(\"create-game\", nickName);\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-sm\"></div>\r\n\r\n      <div className=\"col-sm-8\">\r\n        <h1 className=\"text-center\">Create Game</h1>\r\n        <form onSubmit={onSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"nickname\">Enter Nickname</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"nickname\"\r\n              value={nickName}\r\n              onChange={onChange}\r\n              placeholder=\"Enter nickname\"\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"col-sm\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateGame;\r\n","import React, { useState } from \"react\";\r\nimport socket from \"../socketConfig\";\r\nconst JoinGame = (props) => {\r\n  const [userInput, setUserInput] = useState({ gameID: \"\", nickName: \"\" });\r\n\r\n  const onChange = (e) => {\r\n    // we are gonna use spread operator to copy over the existing\r\n    // property within our state\r\n    // and next what we are gonna do is change the current property\r\n    // that the user is typing in\r\n\r\n    setUserInput({ ...userInput, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(userInput);\r\n    // so here we emit create-game and now we need\r\n    // to go back to server side and listen for the\r\n    // event\r\n    socket.emit(\"join-game\", userInput);\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-sm\"></div>\r\n\r\n      <div className=\"col-sm-8\">\r\n        <h1 className=\"text-center\">Join Game</h1>\r\n        <form onSubmit={onSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"gameID\">Enter Game ID</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"gameID\"\r\n              value={userInput.gameID}\r\n              onChange={onChange}\r\n              placeholder=\"Enter Game ID\"\r\n              className=\"form-control\"\r\n            />\r\n\r\n            <label htmlFor=\"nickName\">Enter Nickname</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"nickName\"\r\n              value={userInput.nickName}\r\n              onChange={onChange}\r\n              placeholder=\"Enter nickname\"\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"col-sm\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JoinGame;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport socket from \"../socketConfig\";\r\n\r\nconst CountDown = (props) => {\r\n  const [timer, setTimer] = useState({ CountDown: \"\", msg: \"\" });\r\n\r\n  useEffect(() => {\r\n    // listen to the 'timer' event\r\n    socket.on(\"timer\", (data) => {\r\n      // set the timer to the data\r\n      // and the timer is always used to display the\r\n      // time to the user\r\n      // this is gonna invoke a lot\r\n      setTimer(data);\r\n    });\r\n\r\n    // listen to the 'done' event\r\n    // this is only gonna invoked only when the user\r\n    // types out everything\r\n    // when the game clock is going , if the players\r\n    // finish early, we are gonna listen for this\r\n    // 'done' event and we will remove the listener\r\n    // for the timer\r\n    // so that's gonna stop the timer from updating\r\n    socket.on(\"done\", () => {\r\n      // this is just the user can see how much time\r\n      // he complete the sentence, by removing the\r\n      // listener, our time stops updating\r\n\r\n      socket.removeListener(\"timer\");\r\n    });\r\n  }, []);\r\n\r\n  const { CountDown, msg } = timer;\r\n  return (\r\n    <>\r\n      <h1>{CountDown}</h1>\r\n      <h3>{msg}</h3>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountDown;\r\n","import React, { useState } from \"react\";\r\nimport socket from \"../socketConfig\";\r\n\r\nconst StartBtn = ({ player, gameID }) => {\r\n  // the whole point of this start button is\r\n  // we only want this button to be visible if\r\n  // the player is the party leader\r\n  // in other words, did this player create the\r\n  // game?\r\n\r\n  const [showBtn, setShowBtn] = useState(true);\r\n  const { isPartyLeader } = player;\r\n\r\n  const onClickHandler = (e) => {\r\n    // now we want to emit the event to the server\r\n    socket.emit(\"timer\", { playerID: player._id, gameID });\r\n\r\n    // the idea of having this flag here is I only\r\n    // want the party leader to be able to click\r\n    // this button once once he clicks it it emits\r\n    // an this event and then hides this button\r\n    // from this user\r\n    setShowBtn(false);\r\n  };\r\n  return (\r\n    // now we are gonna check to see if we\r\n    // should render this button or not\r\n    // if both isPartyLeader && showBtn are\r\n    // true, then we will render out this\r\n    // button\r\n    isPartyLeader && showBtn ? (\r\n      <button\r\n        type=\"button\"\r\n        onClick={onClickHandler}\r\n        className=\"btn btn-primary\">\r\n        Start Game\r\n      </button>\r\n    ) : // otherwise, we render null\r\n    null\r\n  );\r\n};\r\n\r\nexport default StartBtn;\r\n","import React from 'react'\r\n\r\n// you can create this in different CSS file, but we just\r\n// create it in the actual component\r\nconst typedCorrectlyStyle = {\r\n    \"backgroundColor\": \"#34eb77\"\r\n}\r\n\r\nconst getTypedWords = (words, player)=>{\r\n    // words is in array, so we pass index 0, which is our\r\n    // starting point and we want to go up until where the \r\n    // player currently is \r\n    // player.currentWordIndex is going up until 1 less\r\n    // than where the player is currently\r\n    let typedWords = words.slice(0, player.currentWordIndex)\r\n    typedWords = typedWords.join(\" \")\r\n\r\n    // return some JSX\r\n    // add a space after {typedWords} so that {typedWords}\r\n    // won't be mushed with {words[player.currentWordIndex]}\r\n    return <span style = {typedCorrectlyStyle}>{typedWords} </span>\r\n}\r\n\r\n// here the only thing I did was I wanted the text\r\n// to be underlined\r\nconst currentStyle = {\r\n    \"textDecoration\": \"underline\"\r\n}\r\n\r\nconst getCurrentWord = (words, player)=>{\r\n\r\n    // here is simple. what we want to do is output\r\n    // our words so within our words array, we already\r\n    // know where the player is currently at, so we\r\n    // can just access it by saying player.currentWordIndex\r\n    return <span style = {currentStyle}> {words[player.currentWordIndex]}</span>\r\n}\r\n\r\n\r\nconst getWordsToBeTyped = (words, player)=>{\r\n\r\n    // this time, instead of starting at index 0, we want\r\n    // to go one above where the player is currently at\r\n    // and go until the end\r\n    let wordsToBeTyped = words.slice(player.currentWordIndex + 1, words.length)\r\n    wordsToBeTyped = wordsToBeTyped.join(\" \")\r\n\r\n    // we can create a style here but now I don't create one\r\n    // we add a space before {typedWords}. if you don't add\r\n    // a space, then the current word and the words to be \r\n    // typed will be mixed together\r\n    return <span> {wordsToBeTyped}</span>\r\n}\r\n\r\nconst DisplayWords = ({words, player})=>{\r\n    // what we are gonna do is to split the sentence\r\n    // we get into three parts\r\n    // the first part is the words we need to type out\r\n    // the second part is the current word that we are on\r\n    // the third part the words left we need to type out\r\n    // the reason to split it into three parts is\r\n    // because we need to apply different CSS styles \r\n    // to each of them\r\n\r\n    // first let us return some JSX\r\n    // we are gonna use react fragment\r\n    // we will create three helper functions\r\n\r\n    // first one is 'getTypeWords', this is goning to\r\n    // be all the words that the user has typed out\r\n\r\n    return(\r\n        <>\r\n        {/* so we got all the words that we typed out, \r\n        we got the current words we are typing out */}\r\n            {getTypedWords(words, player)}\r\n            {getCurrentWord(words, player)}\r\n\r\n        {/* now we need to do the words that we need to\r\n        type out */}\r\n            {getWordsToBeTyped(words, player)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DisplayWords","import React, { useEffect, useState, useRef } from \"react\";\r\nimport socket from \"../socketConfig\";\r\n\r\n// what we pull out from props is everything we pass down\r\nconst Form = ({ isOpen, isOver, gameID }) => {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n\r\n  const textInput = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // once we listen for isOpen changes, we are\r\n    // gonna check to see if isOpen becomes false\r\n    if (!isOpen) {\r\n      // if isOpen is false, that means the game\r\n      // has started\r\n      // what we end up doing is telling our text\r\n      // input to focus\r\n      // what focus is gonna do is bring our cursor\r\n      // to the textbox\r\n      textInput.current.focus();\r\n    }\r\n\r\n    // within our dependency array we are gonna check\r\n    // to see if isOpen changes\r\n  }, [isOpen]);\r\n\r\n  const resetForm = () => {\r\n    // all our resetForm do is to set our\r\n    // user input to empty string\r\n    setUserInput(\"\");\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    // first thing we need to do is to get the\r\n    // value within the textbox\r\n    let value = e.target.value;\r\n\r\n    // next we want to get the last character\r\n\r\n    // the reason why we want to get the last\r\n    // character is because I am efectively\r\n    // listening for when the user hits the\r\n    // space bar. the user hits the spacebar\r\n    // that means he's submitting this word\r\n    // for the server to check\r\n\r\n    // in order to get the last character\r\n    // doing so will give us the last\r\n    // character that the user typed out\r\n    let lastChar = value.charAt(value.length - 1);\r\n\r\n    // then next we are gonna do is to check\r\n    // to see if the user hits the spacebar\r\n    if (lastChar === \" \") {\r\n      // if the user hits the spacebar\r\n      // we send this to the server\r\n      // the idea is you want the server\r\n      // to check if the client types the\r\n      // word right\r\n      // you never want the client to check\r\n      // the word by himself\r\n      socket.emit(\"userInput\", { userInput, gameID });\r\n      resetForm();\r\n    } else {\r\n      // if the user doesn't hit the\r\n      // spacebar, we will set our user\r\n      // input to whatever the value is\r\n      setUserInput(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    // here we cover what we are gonna render out, so\r\n    // we are gonna return basically just a form\r\n    // so first we are gonna wrap it with a div\r\n    <div className=\"row my-3\">\r\n      {/* we want some space on Y margin\r\n              and then we create grid*/}\r\n      <div className=\"col-sm\"></div>\r\n\r\n      <div className=\"col-sm-4\">\r\n        <form>\r\n          <div className=\"form-group\">\r\n            {/* we only want readOnly set the true\r\n                        if isOpen is true or isOver is true \r\n                        the reason why I want our input readOnly \r\n                        is because I don't want user typing anything\r\n                        within the text box when the game hasn't\r\n                        even started. so {isOpen || isOver} is \r\n                        checking to see if the game is open that \r\n                        means the game hasn't started yet. I am \r\n                        checking isOver because I don't want the user\r\n                        typing anything once the game ends, that \r\n                        doesn't make sense either */}\r\n            <input\r\n              type=\"text\"\r\n              readOnly={isOpen || isOver}\r\n              onChange={onChange}\r\n              value={userInput}\r\n              className=\"form-control\"\r\n              // ref  is what we are gonna\r\n              // to be rendering out to the\r\n              // user\r\n              ref={textInput}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"col-sm\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// so by default, we set our textInput to readOnly cause the game hasn't started\r\n// yet, once the game starts, which is why we are listening for isOpen. isOpen\r\n// becomes false, then I want you to focus on the textbox. that's gonna put our\r\n// cursor within the textbox so the user can immediately typing our the sentences\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\n// calculatePercentage will calculate what percent the user has typed out\r\nconst calculatePercentage = (player, wordsLength) => {\r\n  if (player.currentWordIndex !== 0) {\r\n    // we return (player.currentWordIndex / wordsLength) * 100,\r\n    // which is the amount of words the user has typed out\r\n    return ((player.currentWordIndex / wordsLength) * 100).toFixed(2) + \"%\";\r\n  }\r\n  return 0; // if the user hasn't typed out anything\r\n};\r\n\r\nconst ProgressBar = ({ player, players, wordsLength }) => {\r\n  const percentage = calculatePercentage(player, wordsLength);\r\n  return (\r\n    <div>\r\n      {\r\n        <>\r\n          {/* We always want our user to be on top of all progress bar */}\r\n          <h5 class=\"mt-5 nav nav-pills pull-left\">{player.nickName}</h5>\r\n          {/* we use \"my-1\" to give some space in Y margin */}\r\n          <div className=\"progress my-1\" key={player._id}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              style={{ width: percentage }}>\r\n              {percentage}\r\n            </div>\r\n          </div>\r\n        </>\r\n      }\r\n      {/* we also want to draw out the other players\r\n      , we don't just want our player, so we map over\r\n      players array */}\r\n      {players.map((playerObj) => {\r\n        const percentage = calculatePercentage(playerObj, wordsLength);\r\n\r\n        // since we already ouputted our player, so we\r\n        // don't want to output it twice\r\n        // so for our mapping, we want to check to see\r\n        // we should render that player or not\r\n\r\n        // playerObj._id !== player._id means I want\r\n        // you to render this because this player\r\n        // hasn't been rendered yet\r\n\r\n        return playerObj._id !== player._id ? (\r\n          <>\r\n            {/* We always want our user to be on top of all progress bar */}\r\n            <h5 class=\"mt-3 nav nav-pills pull-left\">{playerObj.nickName}</h5>\r\n            {/* we use \"my-1\" to give some space in Y margin */}\r\n            <div className=\"progress my-1\" key={playerObj._id}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                style={{ width: percentage }}>\r\n                {percentage}\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\n\r\nconst getScoreBoard = (players) => {\r\n  // two things we need to do\r\n  // one is I only want the player to be on the scoreboard\r\n  // if he's finished typing or time has run out of the\r\n  // game, so what I am gonna do is filter out the result\r\n  // if that hasn't occured\r\n  // remember, WPM = -1 means this user hasn't finished\r\n  // typing the sentence yet\r\n  const scoreBoard = players.filter((player) => player.WPM !== -1);\r\n\r\n  // now the scoreBoard above contains all players that\r\n  // have finished typing or time has run out\r\n\r\n  // next thing is we want to sort our scoreBoard in\r\n  // descending order so that the highest WPM on top,\r\n  // lowest on the bottom\r\n  // playerA.WPM > playerB.WPM ? -1 will put playerA ahead of playerB\r\n  // playerB.WPM > playerA.WPM ? -1 will put playerB ahead of playerA\r\n  // return 0 means their WPM's are equal\r\n  return scoreBoard.sort((playerA, playerB) =>\r\n    playerA.WPM > playerB.WPM ? -1 : playerB.WPM > playerA.WPM ? 1 : 0\r\n  );\r\n};\r\n\r\nconst ScoreBoard = ({ players }) => {\r\n  // we want to arrange our players in descending order\r\n  // so the highest WPM on top, lowest on the bottom\r\n  const scoreBoard = getScoreBoard(players);\r\n\r\n  // scoreBoard.length ==0 0 means no one has finished typing\r\n  if (scoreBoard.length === 0) {\r\n    return null;\r\n  } else {\r\n    // otherwise, we render out a stripe table\r\n    return (\r\n      <table className=\"table  my-3\">\r\n        <thead>\r\n          <tr>\r\n            {/* # sign is the place the user got in */}\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">User</th>\r\n            <th scope=\"col\">WPM</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {scoreBoard.map((player, index) => {\r\n            return (\r\n              <tr>\r\n                {/* this shows what place the player ended up in\r\n                                    , since we already sort our scoreBoard in \r\n                                    descending order, we will just output index plus\r\n                                    one */}\r\n                <th scope=\"row\">{index + 1}</th>\r\n                <td>{player.nickName}</td>\r\n                <td>{player.WPM}</td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ScoreBoard;\r\n","import React, { useRef, useState } from \"react\";\r\n\r\nconst DisplayGameCode = ({ gameID }) => {\r\n  // if the user successfully copy the game code, below this is gonna keep\r\n  // track of\r\n  const [copySuccess, setCopySuccess] = useState(false);\r\n\r\n  const textInputRef = useRef(null);\r\n\r\n  const copyToClipboard = (e) => {\r\n    // here we select the input field, so that's why we attach the ref\r\n    textInputRef.current.select();\r\n    // document.execCommand(\"copy\") will copy whatever value is within <input>\r\n    // we set value= {gameID}, which is what user uses to actually join games\r\n    document.execCommand(\"copy\");\r\n    // afterwards, once we copy the game room id, all we need to do is to\r\n    // set our copy success to true\r\n    setCopySuccess(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"row my-3 text-center\">\r\n      <div className=\"col-sm\"></div>\r\n      <div className=\"col-sm-8\">\r\n        <h4>Send This Code to Your Friends for Them to Join</h4>\r\n        <div className=\"input-group mb-3\">\r\n          {/* we have ref so we have an access to this input field,\r\n                  once we have access to this input field, what we are gonna \r\n                  end up doing is copying the value which is the gameID into\r\n                  the clipboard\r\n                  That way, the user can essentially send this code to whoever\r\n                  he wants to send it to */}\r\n          <input\r\n            type=\"text\"\r\n            ref={textInputRef}\r\n            value={gameID}\r\n            readOnly={true}\r\n            className=\"form-control\"\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              className=\"btn btn-outline-secondary\"\r\n              onClick={copyToClipboard}\r\n              type=\"button\">\r\n              {\" \"}\r\n              Copy Gamecode\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {copySuccess ? (\r\n          <div className=\"alert alert-success\" role=\"alert\">\r\n            Successfully Copied the Gamecode\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <div className=\"col-sm\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayGameCode;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport CountDown from \"./CountDown\";\r\nimport StartBtn from \"./StartBtn\";\r\nimport socket from \"../socketConfig\";\r\nimport DisplayWords from \"./DisplayWords\";\r\nimport Form from \"./Form\";\r\nimport ProgressBar from \"./ProgressBar\";\r\nimport ScoreBoard from \"./ScoreBoard\";\r\nimport DisplayGameCode from \"./DisplayGameCode\";\r\n\r\nconst findPlayer = (players) => {\r\n  // this is gonna return the player that matches the socket id\r\n  // that means that this is us\r\n  return players.find((player) => player.socketID === socket.id);\r\n};\r\n\r\nconst TypeRacer = ({ gameState }) => {\r\n  // We pull out isOpen, isOver from gameState to let\r\n  // Form use both of them\r\n  const { _id, players, words, isOpen, isOver } = gameState;\r\n\r\n  // players contains all the players within the game. I want\r\n  // the actual player, that's us, that's playing the game. I\r\n  // don't want all my opponents, I want myself\r\n  const player = findPlayer(players);\r\n\r\n  // if the _id is equal to empty string, that means that this\r\n  // user on this page did not go to the join page. then we need\r\n  // to redirect them to the home page\r\n  if (_id === \"\") {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"text-center\">\r\n      <DisplayWords words={words} player={player} />\r\n      <ProgressBar\r\n        players={players}\r\n        player={player}\r\n        wordsLength={words.length}\r\n      />\r\n\r\n      {/* We have Form here and as props. what we are gonna\r\n            take in is isOpen, isOver, and gameID */}\r\n      <Form isOpen={isOpen} isOver={isOver} gameID={_id} />\r\n\r\n      <CountDown />\r\n      <StartBtn player={player} gameID={_id} />\r\n      <DisplayGameCode gameID={_id} />\r\n      <ScoreBoard players={players} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypeRacer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport history from \"../history\";\r\nimport GameMenu from \"../game-components/GameMenu\";\r\nimport socket from \"../socketConfig\";\r\nimport CreateGame from \"../game-components/CreateGame\";\r\nimport JoinGame from \"../game-components/JoinGame\";\r\nimport TypeRacer from \"../game-components/TypeRacer\";\r\n\r\nexport default function Game() {\r\n  const [gameState, setGameState] = useState({\r\n    _id: \"\",\r\n    isOpen: false,\r\n    players: [],\r\n    words: [],\r\n  });\r\n  useEffect(() => {\r\n    // once updateGame is called, we will set it in setGameState()\r\n    socket.on(\"updateGame\", (game) => {\r\n      console.log(game);\r\n      setGameState(game);\r\n\r\n      // the code below has one problem: whenever you are setting this\r\n      // state, setGameState, this is an asynchronous event, so this is\r\n      // not synchronous. So what I need to do before navigating to the\r\n      // game page is I need to make sure that this game state has been\r\n      // loaded. Thus, we are not gonna use history.push here, we use\r\n      // useEffect again\r\n\r\n      //history.push(`/game/${game._id}`)\r\n    });\r\n\r\n    // once our component unmount, we are goning to use this function and\r\n    // all we gonna to is to remove all the listeners off our socket\r\n    return () => {\r\n      socket.removeAllListeners();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // if statement means \"hey, we successfully update the game and now\r\n    // go to the game page\"\r\n    if (gameState._id !== \"\") {\r\n      history.push(`/game/${gameState._id}`);\r\n    }\r\n  }, [gameState._id]);\r\n  return (\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={GameMenu} />\r\n        <Route path=\"/game/create\" component={CreateGame} />\r\n        <Route path=\"/game/join\" component={JoinGame} />\r\n\r\n        <Route\r\n          path=\"/game/:gameID\"\r\n          render={(props) => <TypeRacer {...props} gameState={gameState} />}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n","// this higher order component is to protect the components that you need to\r\n// be logged in for\r\n\r\nimport React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\n\r\n// we are destructure the props that is passed in\r\n// the first thing to do is to pull out the 'component' and we will name it to\r\n// 'Component' with capital C. the reason for that is because it's actually\r\n// required by react that components need to be capitalized. ex: PrivateRoute\r\n// second thing is to pull out 'roles'. what role is, is the roles that you want\r\n// to be access this particular route\r\n// the reset parameter, ... rest, is to collect all the properties that you are not\r\n// pulling out from 'component' and 'role', and I want to store these left properties\r\n// in ...rest\r\n\r\nconst PrivateRoute = ({ component: Component, roles, ...rest }) => {\r\n  const { isAuthenticated, user } = useContext(AuthContext);\r\n  return (\r\n    <Route\r\n      // {...rest} is a spread operator, so it's gonna copy the properties within\r\n      // this object, ...rest, into this new object, {...rest}, here\r\n      {...rest}\r\n      // render={()=>{...}} is goning to decide what to render\r\n      render={(props) => {\r\n        // if the user is not authenticated, we will redirect him to the page '/login'\r\n        // pathname: \"/login\" is where the user will be sent to if he is not authenticated\r\n        // state: { from: props.location } is where the user is coming from\r\n        if (!isAuthenticated)\r\n          return (\r\n            <Redirect\r\n              to={{ pathname: \"/login\", state: { from: props.location } }}\r\n            />\r\n          );\r\n\r\n        // here we want to check to see if the user has correct role. we get an array of\r\n        // roles from 'roles' by destructuring the passed in prop. what this 'role' is\r\n        // containing is all the roles that you want to have the access to this component\r\n        // so below we want to check to see if the user's role is not included within\r\n        // 'roles' array\r\n        // if 'roles.includes(user.role)' is false, that means the user doesn't have the\r\n        // correct role in order to view this page\r\n        if (!roles.includes(user.role))\r\n          return (\r\n            <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\r\n          );\r\n        return <Component {...props} />;\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\n\nconst UnPrivateRoute = ({ component: Component, ...rest }) => {\n  const { isAuthenticated } = useContext(AuthContext);\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (isAuthenticated)\n          return (\n            <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\n          );\n\n        return <Component {...props} />;\n      }}\n    />\n  );\n};\n\nexport default UnPrivateRoute;\n","import React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nimport Todos from \"./components/Todos\";\nimport Admin from \"./components/Admin\";\nimport Game from \"./components/Game\";\n// import UnPrivateRoute from \"./hocs/UnPrivateRoute\";\nimport PrivateRoute from \"./hocs/PrivateRoute\";\nimport UnPrivateRoute from \"./hocs/UnPrivateRoute\";\n\n// react-router is a routing system for react, so you have a main 'Router' and a\n// 'Route' component . the 'Route' component takes in a path and based on that path\n// it's gonna render components that you want to be rendered out\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n// App component here is gonna contain our whole application, so our application is\n// gonna to end up having access to the users and authenticated states that we want\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n\n      {/* component={Home} is the component we want to render */}\n      {/* path=\"/\" is the URL is gonna matched up with component={Home}, and\n      component={Home} render the Home component when you hit \"/\" route*/}\n      {/* the 'exact' property is because the react router uses partial pattern\n      matching. so if I create another route and have \"/something...\", it will\n      actually render out both routes. we don't want that to happen */}\n      <Route exact path=\"/\" component={Home} />\n      <UnPrivateRoute path=\"/login\" component={Login} />\n      <UnPrivateRoute path=\"/register\" component={Register} />\n      <PrivateRoute path=\"/todos\" roles={[\"user\", \"admin\"]} component={Todos} />\n      <PrivateRoute path=\"/admin\" roles={[\"admin\"]} component={Admin} />\n      <PrivateRoute path=\"/game\" roles={[\"user\", \"admin\"]} component={Game} />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport AuthProvider from \"./context/AuthContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}